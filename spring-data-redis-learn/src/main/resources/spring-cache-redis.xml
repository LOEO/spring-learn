<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p"
	   xmlns="http://www.springframework.org/schema/beans"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">
	<context:component-scan base-package="com.lt.spring.data.redis"/>
	<context:property-placeholder location="classpath:redis.properties"></context:property-placeholder>
	<bean id="stringKeySerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
	<bean id="jsonSerializer" class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer">
	</bean>
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="100000000"/>
	</bean>
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.hostName}"/>
		<property name="port" value="${redis.port}"/>
		<property name="poolConfig" ref="jedisPoolConfig"></property>
		<property name="timeout" value="10"></property>
		<!--<property name="password" value="${redis.password}"/>-->
	</bean>
	<bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
		<constructor-arg ref="redisTemplate"/>
	</bean>
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
		  p:connectionFactory-ref="jedisConnectionFactory"
		  p:keySerializer-ref="stringKeySerializer"
	/>

	<cache:annotation-driven cache-manager="cacheManager" key-generator="customKeyGenerator" />
	<!--<aop:config proxy-target-class="true">
		<aop:pointcut id="cachePointcut" expression="execution(* com.lt.spring.data.redis..*.*(..))"/>
		<aop:aspect id="cacheAspect" ref="cacheInterceptor" >
			<aop:around method="intercept" pointcut-ref="cachePointcut"></aop:around>
		</aop:aspect>
	</aop:config>
	<bean id="cacheInterceptor" class="com.lt.spring.data.redis.interceptor.CustomCacheInterceptor"/>-->

</beans>